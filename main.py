import marshal, base64, hashlib, os

def decrypt_data(encrypted_data, key, use_key):
    decoded_data = base64.b64decode(encrypted_data.encode())
    if use_key and key:
        hashed_key = hashlib.sha256(key.encode()).digest()
        if decoded_data[:len(hashed_key)] != hashed_key:
            raise ValueError('Kunci salah! Tidak dapat mendekripsi script.')
        print('Kunci benar! Script berjalan...')
        return marshal.loads(base64.b64decode(decoded_data[len(hashed_key):]))
    return marshal.loads(base64.b64decode(decoded_data))
SECRET_KEY = None
exec(decrypt_data('', SECRET_KEY, False))
print('by bimz')